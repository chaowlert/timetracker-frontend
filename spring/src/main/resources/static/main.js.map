{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/api/api.module.ts","webpack:///./src/app/api/api/api.ts","webpack:///./src/app/api/api/apiController.service.ts","webpack:///./src/app/api/configuration.ts","webpack:///./src/app/api/encoder.ts","webpack:///./src/app/api/index.ts","webpack:///./src/app/api/variables.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/date-formatter.service.ts","webpack:///./src/app/spa-add/spa-add.component.css","webpack:///./src/app/spa-add/spa-add.component.html","webpack:///./src/app/spa-add/spa-add.component.ts","webpack:///./src/app/spa-search/spa-search.component.css","webpack:///./src/app/spa-search/spa-search.component.html","webpack:///./src/app/spa-search/spa-search.component.ts","webpack:///./src/app/spa/spa.component.css","webpack:///./src/app/spa/spa.component.html","webpack:///./src/app/spa/spa.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { Configuration } from './configuration';\n\nimport { ApiControllerService } from './api/apiController.service';\n\n@NgModule({\n  imports:      [ CommonModule, HttpClientModule ],\n  declarations: [],\n  exports:      [],\n  providers: [\n    ApiControllerService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        }\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import your base AppModule only.');\n        }\n    }\n}\n","export * from './apiController.service';\nimport { ApiControllerService } from './apiController.service';\nexport const APIS = [ApiControllerService];\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport {\n  HttpClient, HttpHeaders, HttpParams,\n  HttpResponse, HttpEvent\n} from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec } from '../encoder';\n\nimport { Observable } from 'rxjs/Observable';\n\nimport { TrackingRecord } from '../model/trackingRecord';\nimport { TrackingRecordData } from '../model/trackingRecordData';\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables';\nimport { Configuration } from '../configuration';\n\n\n@Injectable()\nexport class ApiControllerService {\n\n  protected basePath = 'https://localhost:8081';\n  public defaultHeaders = new HttpHeaders();\n  public configuration = new Configuration();\n\n  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n    if (basePath) {\n      this.basePath = basePath;\n    }\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = basePath || configuration.basePath || this.basePath;\n    }\n  }\n\n  /**\n   * @param consumes string[] mime-types\n   * @return true: consumes contains 'multipart/form-data', false: otherwise\n   */\n  private canConsumeForm(consumes: string[]): boolean {\n    const form = 'multipart/form-data';\n    for (let consume of consumes) {\n      if (form === consume) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n\n  /**\n   * add\n   *\n   * @param data data\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public add(data: TrackingRecordData, observe?: 'body', reportProgress?: boolean): Observable<TrackingRecord>;\n  public add(data: TrackingRecordData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TrackingRecord>>;\n  public add(data: TrackingRecordData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TrackingRecord>>;\n  public add(data: TrackingRecordData, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n    if (data === null || data === undefined) {\n      throw new Error('Required parameter data was null or undefined when calling add.');\n    }\n\n    let headers = this.defaultHeaders;\n\n    // to determine the Accept header\n    let httpHeaderAccepts: string[] = [\n      '*/*'\n    ];\n    let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    if (httpHeaderAcceptSelected != undefined) {\n      headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n    }\n\n    // to determine the Content-Type header\n    let consumes: string[] = [\n      'application/json'\n    ];\n    let httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n    if (httpContentTypeSelected != undefined) {\n      headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n    }\n\n    return this.httpClient.post<TrackingRecord>(`${this.basePath}/api/records`,\n      data,\n      {\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      }\n    );\n  }\n\n  /**\n   * browse\n   *\n   * @param email email\n   * @param offset offset\n   * @param limit limit\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public browse(email: string, offset?: number, limit?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TrackingRecord>>;\n  public browse(email: string, offset?: number, limit?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TrackingRecord>>>;\n  public browse(email: string, offset?: number, limit?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TrackingRecord>>>;\n  public browse(email: string, offset?: number, limit?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n    if (email === null || email === undefined) {\n      throw new Error('Required parameter email was null or undefined when calling browse.');\n    }\n\n    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n    if (email !== undefined) {\n      queryParameters = queryParameters.set('email', <any>email);\n    }\n    if (offset !== undefined) {\n      queryParameters = queryParameters.set('offset', <any>offset);\n    }\n    if (limit !== undefined) {\n      queryParameters = queryParameters.set('limit', <any>limit);\n    }\n\n    let headers = this.defaultHeaders;\n\n    // to determine the Accept header\n    let httpHeaderAccepts: string[] = [\n      '*/*'\n    ];\n    let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    if (httpHeaderAcceptSelected != undefined) {\n      headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n    }\n\n    // to determine the Content-Type header\n    let consumes: string[] = [\n    ];\n\n    return this.httpClient.get<Array<TrackingRecord>>(`${this.basePath}/api/records`,\n      {\n        params: queryParameters,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress\n      }\n    );\n  }\n\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param {string[]} contentTypes - the array of content types that are available for selection\n     * @returns {string} the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param {string[]} accepts - the array of content types that are available for selection.\n     * @returns {string} the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param {string} mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return {boolean} True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","    import { HttpUrlEncodingCodec } from '@angular/common/http';\n\n/**\n* CustomHttpUrlEncodingCodec\n* Fix plus sign (+) not encoding, so sent as blank space\n* See: https://github.com/angular/angular/issues/11058#issuecomment-247367318\n*/\nexport class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {\n    encodeKey(k: string): string {\n        k = super.encodeKey(k);\n        return k.replace(/\\+/gi, '%2B');\n    }\n    encodeValue(v: string): string {\n        v = super.encodeValue(v);\n        return v.replace(/\\+/gi, '%2B');\n    }\n}\n\n","export * from './api/api';\nexport * from './model/models';\nexport * from './variables';\nexport * from './configuration';\nexport * from './api.module';","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","module.exports = \"\\n\"","import { Component, AfterViewInit } from '@angular/core';\nimport { DecimalPipe, DatePipe } from '@angular/common';\nimport { MatSnackBar } from '@angular/material';\nimport { DateFormatterService } from './date-formatter.service';\n\n@Component({\n  selector: 'app-root',\n  template: (window as any).mainTemplate + '', // (window as any).mainTemplate,\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements AfterViewInit {\n  hrs = Array.from(Array(24), (_, i) => i);\n  mms = Array.from(Array(60), (_, i) => i);\n  startDate: Date;\n  startHour: number;\n  startMinute: number;\n  endDate: Date;\n  endHour: number;\n  endMinute: number;\n\n  constructor(\n    private dateFormatter: DateFormatterService,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ngAfterViewInit() {\n    const added = this.getInput('added');\n    if (added && added.value) {\n      this.snackBar.open(`Tracking for ${added.value} has been added`, 'OK', { duration: 5000 });\n    }\n  }\n\n  submit($event: Event) {\n    const form = $event.currentTarget as HTMLFormElement;\n    form.submit();\n  }\n\n  getInput(id: string) {\n    return document.getElementById(id) as HTMLInputElement;\n  }\n\n  navPage(i: number) {\n    const input = this.getInput('page');\n    input.value = (+input.value + i) + '';\n  }\n\n  addRecord() {\n    const start = this.getInput('start');\n    start.value = this.dateFormatter.formatDate(this.startDate, this.startHour, this.startMinute);\n\n    const end = this.getInput('end');\n    end.value = this.dateFormatter.formatDate(this.endDate, this.endHour, this.endMinute);\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {\n  MatTabsModule,\n  MatCardModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatButtonModule,\n  MatIconModule,\n  MatTableModule,\n  MatDatepickerModule,\n  MatNativeDateModule,\n  MatSelectModule,\n  MatSnackBarModule,\n  MatPaginatorModule,\n  MatProgressSpinnerModule,\n} from '@angular/material';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { DecimalPipe, DatePipe } from '@angular/common';\nimport { ApiModule, BASE_PATH } from './api';\nimport { SpaComponent } from './spa/spa.component';\nimport { SpaSearchComponent } from './spa-search/spa-search.component';\nimport { SpaAddComponent } from './spa-add/spa-add.component';\nimport { environment } from '../environments/environment';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SpaComponent,\n    SpaSearchComponent,\n    SpaAddComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    MatTabsModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatIconModule,\n    MatTableModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatSelectModule,\n    MatSnackBarModule,\n    MatPaginatorModule,\n    MatProgressSpinnerModule,\n    ApiModule,\n  ],\n  providers: [\n    DecimalPipe,\n    DatePipe,\n    { provide: BASE_PATH, useValue: environment.apiPath }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { DecimalPipe, DatePipe } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DateFormatterService {\n\n  constructor(\n    private numberPipe: DecimalPipe,\n    private datePipe: DatePipe\n  ) { }\n\n  formatDate(date: Date, hour: number, minute: number) {\n    return this.datePipe.transform(date, 'dd.MM.yyyy') + ' '\n      + this.numberPipe.transform(hour, '2.0-0') + ':'\n      + this.numberPipe.transform(minute, '2.0-0');\n  }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"loading-shade\\\" *ngIf=\\\"isLoadingResults\\\">\\n  <mat-spinner></mat-spinner>\\n</div>\\n<mat-card>\\n  <mat-card-title>Input data, and click add</mat-card-title>\\n  <mat-card-content>\\n    <form action=\\\"/add\\\" (ngSubmit)=\\\"submit();addForm.resetForm()\\\" method=\\\"POST\\\" #addForm=\\\"ngForm\\\">\\n      <mat-form-field class=\\\"email\\\">\\n        <input type=\\\"email\\\" matInput placeholder=\\\"Email\\\" name=\\\"email\\\" required email [(ngModel)]=\\\"inputEmail\\\" #inputEmailCtrl=\\\"ngModel\\\"\\n        />\\n        <mat-error *ngIf=\\\"inputEmailCtrl.errors && inputEmailCtrl.errors['required']\\\">\\n          Email is\\n          <strong>required</strong>\\n        </mat-error>\\n        <mat-error *ngIf=\\\"inputEmailCtrl.errors && inputEmailCtrl.errors['email']\\\">\\n          Please enter a valid email address\\n        </mat-error>\\n      </mat-form-field>\\n      <br/>\\n      <mat-form-field>\\n        <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Start date\\\" name=\\\"startDate\\\" required [(ngModel)]=\\\"startDate\\\" #startDateCtrl=\\\"ngModel\\\">\\n        <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n        <mat-datepicker #picker></mat-datepicker>\\n        <mat-error *ngIf=\\\"startDateCtrl.errors && startDateCtrl.errors['required']\\\">\\n          Start date is\\n          <strong>required</strong>\\n        </mat-error>\\n      </mat-form-field>\\n      <mat-form-field class=\\\"time\\\">\\n        <mat-select placeholder=\\\"Hour\\\" name=\\\"startHour\\\" required [(ngModel)]=\\\"startHour\\\" #startHourCtrl=\\\"ngModel\\\">\\n          <mat-option *ngFor=\\\"let hr of hrs\\\" [value]=\\\"hr\\\">\\n            {{ hr | number:'2.0-0' }}\\n          </mat-option>\\n        </mat-select>\\n        <mat-error *ngIf=\\\"startHourCtrl.errors && startHourCtrl.errors['required']\\\">\\n          Hour is\\n          <strong>required</strong>\\n        </mat-error>\\n      </mat-form-field>\\n      <mat-form-field class=\\\"time\\\">\\n        <mat-select placeholder=\\\"Minute\\\" name=\\\"startMinute\\\" required [(ngModel)]=\\\"startMinute\\\" #startMinuteCtrl=\\\"ngModel\\\">\\n          <mat-option *ngFor=\\\"let mm of mms\\\" [value]=\\\"mm\\\">\\n            {{ mm | number:'2.0-0' }}\\n          </mat-option>\\n        </mat-select>\\n        <mat-error *ngIf=\\\"startMinuteCtrl.errors && startMinuteCtrl.errors['required']\\\">\\n          Minute is\\n          <strong>required</strong>\\n        </mat-error>\\n      </mat-form-field>\\n      <br/>\\n      <mat-form-field>\\n        <input matInput [matDatepicker]=\\\"picker2\\\" placeholder=\\\"End date\\\" name=\\\"endDate\\\" required [(ngModel)]=\\\"endDate\\\" #endDateCtrl=\\\"ngModel\\\">\\n        <mat-datepicker-toggle matSuffix [for]=\\\"picker2\\\"></mat-datepicker-toggle>\\n        <mat-datepicker #picker2></mat-datepicker>\\n        <mat-error *ngIf=\\\"endDateCtrl.errors && endDateCtrl.errors['required']\\\">\\n          End date is\\n          <strong>required</strong>\\n        </mat-error>\\n      </mat-form-field>\\n      <mat-form-field class=\\\"time\\\">\\n        <mat-select placeholder=\\\"Hour\\\" name=\\\"endHour\\\" required [(ngModel)]=\\\"endHour\\\" #endHourCtrl=\\\"ngModel\\\">\\n          <mat-option *ngFor=\\\"let hr of hrs\\\" [value]=\\\"hr\\\">\\n            {{ hr | number:'2.0-0' }}\\n          </mat-option>\\n        </mat-select>\\n        <mat-error *ngIf=\\\"endHourCtrl.errors && endHourCtrl.errors['required']\\\">\\n          Hour is\\n          <strong>required</strong>\\n        </mat-error>\\n      </mat-form-field>\\n      <mat-form-field class=\\\"time\\\">\\n        <mat-select placeholder=\\\"Minute\\\" name=\\\"endMinute\\\" required [(ngModel)]=\\\"endMinute\\\" #endMinuteCtrl=\\\"ngModel\\\">\\n          <mat-option *ngFor=\\\"let mm of mms\\\" [value]=\\\"mm\\\">\\n            {{ mm | number:'2.0-0' }}\\n          </mat-option>\\n        </mat-select>\\n        <mat-error *ngIf=\\\"endMinuteCtrl.errors && endMinuteCtrl.errors['required']\\\">\\n          Minute is\\n          <strong>required</strong>\\n        </mat-error>\\n      </mat-form-field>\\n      <br/>\\n      <input type=\\\"hidden\\\" name=\\\"start\\\" id=\\\"start\\\" />\\n      <input type=\\\"hidden\\\" name=\\\"end\\\" id=\\\"end\\\" />\\n      <button mat-raised-button type=\\\"submit\\\" color=\\\"primary\\\" [disabled]=\\\"!addForm.valid\\\">\\n        <mat-icon>add</mat-icon>Add\\n      </button>\\n    </form>\\n    <div th:if=\\\"${added != null}\\\">\\n      <input type=\\\"hidden\\\" id=\\\"added\\\" name=\\\"added\\\" th:value=\\\"${added.email}\\\" />\\n    </div>\\n  </mat-card-content>\\n</mat-card>\\n\"","import { Component } from '@angular/core';\nimport { ApiControllerService } from '../api';\nimport { DateFormatterService } from '../date-formatter.service';\nimport { MatSnackBar } from '@angular/material';\nimport { FormControl, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-spa-add',\n  templateUrl: './spa-add.component.html',\n  styleUrls: ['./spa-add.component.css']\n})\nexport class SpaAddComponent {\n  inputEmail: string;\n  hrs = Array.from(Array(24), (_, i) => i);\n  mms = Array.from(Array(60), (_, i) => i);\n  startDate: Date;\n  startHour: number;\n  startMinute: number;\n  endDate: Date;\n  endHour: number;\n  endMinute: number;\n  isLoadingResults = false;\n\n  constructor(\n    private api: ApiControllerService,\n    private dateFormatter: DateFormatterService,\n    private snackBar: MatSnackBar\n  ) { }\n\n  submit() {\n    const start = this.dateFormatter.formatDate(this.startDate, this.startHour, this.startMinute);\n    const end = this.dateFormatter.formatDate(this.endDate, this.endHour, this.endMinute);\n    this.isLoadingResults = true;\n    this.api.add({ email: this.inputEmail, start, end })\n      .subscribe(data => {\n        this.isLoadingResults = false;\n        this.snackBar.open(`Tracking for ${data.email} has been added`, 'OK', { duration: 5000 });\n      });\n  }\n}\n","module.exports = \"\\n\"","module.exports = \"<div class=\\\"loading-shade\\\" *ngIf=\\\"isLoadingResults\\\">\\n  <mat-spinner></mat-spinner>\\n</div>\\n<mat-card>\\n  <mat-card>\\n    <mat-card-title>Input email and click search</mat-card-title>\\n    <mat-card-content>\\n      <form (ngSubmit)=\\\"submit();searchForm.resetForm()\\\" #searchForm=\\\"ngForm\\\">\\n        <mat-form-field class=\\\"email\\\">\\n          <input type=\\\"email\\\" matInput placeholder=\\\"Email\\\" name=\\\"email\\\" required email [(ngModel)]=\\\"email\\\" #emailCtrl=\\\"ngModel\\\" />\\n          <mat-error *ngIf=\\\"emailCtrl.errors && emailCtrl.errors['required']\\\">\\n            Email is\\n            <strong>required</strong>\\n          </mat-error>\\n          <mat-error *ngIf=\\\"emailCtrl.errors && emailCtrl.errors['email']\\\">\\n            Please enter a valid email address\\n          </mat-error>\\n        </mat-form-field>\\n        <button mat-raised-button type=\\\"submit\\\" color=\\\"primary\\\" [disabled]=\\\"emailCtrl.errors\\\">\\n          <mat-icon>search</mat-icon>Search\\n        </button>\\n      </form>\\n    </mat-card-content>\\n  </mat-card>\\n  <br/>\\n  <div [hidden]=\\\"!searchEmail\\\">\\n    <form action=\\\"/search\\\" method=\\\"POST\\\" (ngSubmit)=\\\"submit()\\\">\\n      <mat-card [hidden]=\\\"!dataSource.length\\\">\\n        <mat-card-title>Results</mat-card-title>\\n        <mat-card-content>\\n          <table class=\\\"mat-elevation-z8\\\" mat-table [dataSource]=\\\"dataSource\\\">\\n\\n            <ng-container matColumnDef=\\\"email\\\">\\n              <th mat-header-cell *matHeaderCellDef> Email </th>\\n              <td mat-cell *matCellDef=\\\"let element\\\"> {{element.email}} </td>\\n            </ng-container>\\n\\n            <ng-container matColumnDef=\\\"start\\\">\\n              <th mat-header-cell *matHeaderCellDef> Start time </th>\\n              <td mat-cell *matCellDef=\\\"let element\\\"> {{element.start | date:'dd.MM.yyyy HH:mm'}} </td>\\n            </ng-container>\\n\\n            <ng-container matColumnDef=\\\"end\\\">\\n              <th mat-header-cell *matHeaderCellDef> End time </th>\\n              <td mat-cell *matCellDef=\\\"let element\\\"> {{element.end | date:'dd.MM.yyyy HH:mm'}} </td>\\n            </ng-container>\\n\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n          </table>\\n          <mat-paginator [length]=\\\"resultLength\\\" [pageSizeOptions]=\\\"[5, 10, 20]\\\"></mat-paginator>\\n        </mat-card-content>\\n      </mat-card>\\n      <mat-card [hidden]=\\\"dataSource.length\\\">\\n        <mat-card-title>No Data</mat-card-title>\\n      </mat-card>\\n    </form>\\n  </div>\\n</mat-card>\\n\"","import { Component, OnInit, ViewChild, EventEmitter, AfterViewInit } from '@angular/core';\nimport { MatPaginator, PageEvent } from '@angular/material';\nimport { startWith, switchMap, filter } from 'rxjs/operators';\nimport { merge, Subject } from 'rxjs';\nimport { TrackingRecord, ApiControllerService } from '../api';\n\n@Component({\n  selector: 'app-spa-search',\n  templateUrl: './spa-search.component.html',\n  styleUrls: ['./spa-search.component.css']\n})\nexport class SpaSearchComponent implements AfterViewInit {\n  displayedColumns = ['email', 'start', 'end'];\n  email: string;\n  searchEmail: string;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  isLoadingResults = false;\n  dataSource: TrackingRecord[] = [];\n  resultLength = 0;\n\n  private searchEvent = new Subject<void>();\n\n  constructor(\n    private api: ApiControllerService\n  ) { }\n\n  ngAfterViewInit() {\n    merge<void>(this.paginator.page, this.searchEvent)\n      .pipe(\n        switchMap(() => {\n          this.isLoadingResults = true;\n          return this.api.browse(this.searchEmail, this.paginator.pageIndex * this.paginator.pageSize, this.paginator.pageSize + 1);\n        })\n      )\n      .subscribe(data => {\n        this.isLoadingResults = false;\n\n        const len = this.paginator.pageIndex * this.paginator.pageSize + data.length;\n        if (data.length === this.paginator.pageSize + 1) {\n          data.splice(this.paginator.pageSize, 1);\n        }\n        this.resultLength = len;\n        this.dataSource = data;\n      });\n  }\n\n  submit() {\n    this.searchEmail = this.email;\n    this.paginator.pageIndex = 0;\n    this.searchEvent.next();\n  }\n}\n","module.exports = \"\"","module.exports = \"<mat-tab-group>\\n  <mat-tab label=\\\"Time records\\\">\\n    <app-spa-search></app-spa-search>\\n  </mat-tab>\\n  <mat-tab label=\\\"Add time tracking\\\">\\n    <app-spa-add></app-spa-add>\\n  </mat-tab>\\n</mat-tab-group>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-spa',\n  templateUrl: './spa.component.html',\n  styleUrls: ['./spa.component.css']\n})\nexport class SpaComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export const environment = {\n  production: true,\n  apiPath: '.',\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}